---

- name: Deploy web project to servers
  hosts: all
  gather_facts: yes
  # strategy: free  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö. –ï—Å–ª–∏ —Ö–æ—Å—Ç –∑–∞–≤—Ä–µ—à–∏–ª Task 1, –æ–Ω —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
                    # –∫ Task 2, –¥–∞–∂–µ  –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Ö–æ—Å—Ç—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ Task 1.
  any_errors_fatal: no # –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥—Ä. —Å–µ—Ä–≤–µ—Ä–∞—Ö –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

  vars:
    ansible_connection: ssh
    ansible_user: sysadm
    ansible_password: "our_ssh_password" # –£–∫–∞–∑–∞—Ç—å ssh –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o ConnectTimeout=60' # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

  vars_files:
    - vars/main.yml

  pre_tasks:
    - name: Verify SSH connectivity with credentials  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SSH
      wait_for_connection:
        timeout: 60 # –£–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç
        sleep: 5
      register: ssh_check
      until: ssh_check is success
      retries: 3
      delay: 10  
      tags: always
      ignore_errors: no # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    - name: Execute backup_scripts     # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –±–µ–∫–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ë–î # —É–±—Ä–∞—Ç—å –±–∞—à —Å–∫—Ä–∏–ø—Ç—ã –∏–∑ redeploy.sh
      command: "{{ item }}"
      args:
        chdir: /home/sysadm/
      loop:
        - /home/sysadm/backup_project.sh    # –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑ files   
        - /home/sysadm/backup_bd.sh         # –∫–æ–ø–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ /home/sysadm/project_XX.XX.XX
      register: backup_scripts_results      # –¥–∞–º–ø –ë–î –ø–æ –ø—É—Ç–∏ /var/lib/postgresql/ 
      ignore_errors: yes
      notify:
        - Send backup Telegram notification   
        
  tasks:
    - name: Copy release files to servers  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ arsp_new.zip, .sh + .py.scripts, python_scripts(–µ—Å–ª–∏,
      copy:                                # –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ .py –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 
        src: "files/"
        dest: /home/sysadm/
        mode: "0755"
      register: copy_result

    - name: Extract release archive # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
      unarchive:
        src: /home/sysadm/arsp_new.zip
        dest: /home/sysadm/
        remote_src: yes
        creates: /home/sysadm/.extracted_flag  # –§–ª–∞–≥ –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      register: extract_result
      ignore_errors: yes
      when: copy_result is changed          # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã
    
    - name: Run installation script
      command: /home/sysadm/redeploy_no_db_no_compile.sh
      args:
        chdir: /home/sysadm
      register: install_result
      ignore_errors: yes # –Ø–≤–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ (–Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å)
      notify:
        - Send immediate Telegram notification
      when: 
        - extract_result is succeeded or extract_result is skipped # –£—Å–ª–æ–≤–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–æ–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ


  post_tasks:
    - name: Process Python fixes if exist # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ .py —Å–∫—Ä–∏–ø—Ç–æ–≤, –ø–µ—Ä–µ–¥–∞–Ω–Ω–Ω—ã—Ö –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. 
      block:                              # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫, –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω block (–±–ª–æ–∫)
        - name: Find .py fix files (excluding migrations)
          find:
            paths: /home/sysadm/
            patterns: "*.py"
            excludes: "add_migrations.py, show_migrations.py" # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ .py —Å–∫—Ä–∏–ø—Ç–æ–≤, —Ç.–∫. –æ–Ω–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ bash-—Å–∫—Ä–∏–ø—Ç–∞ 
            recurse: no # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
          register: py_fixes # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é py_fixes

        - name: Copy .py files
          copy:
            src: "{{ item.path }}" # –ò—Å—Ç–æ—á–Ω–∏–∫ (–ø—É—Ç—å –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
            dest: /var/www/arsp/
            remote_src: yes # yes - —Ñ–∞–π–ª—ã —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
            mode: '0755'
          loop: "{{ py_fixes.files }}"
          when: py_fixes.matched > 0
          register: copy_scripts_result
        
        - name: Execute .py files SEQUENTIALLY # –ó–∞–ø—É—Å–∫ .py —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
          command: "python3 /var/www/arsp/{{ item | basename }}" # –§–∏–ª—å—Ç—Ä Ansible, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏ (–Ω/–ø /home/sysadm/fix1.py -> fix.py)
          args:
            chdir: /var/www/arsp/
          loop: "{{ py_fixes.files | map(attribute='path') | list }}" # py_fixes.files - c–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, map(attribute='path') - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π, list - —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É —Å–ø–∏—Å–æ–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) 
          loop_control:
            label: "{{ item | basename }}"
          register: scripts_results
          until: scripts_results is success
          retries: 1
          delay: 5
          ignore_errors: "{{ ignore_py_errors | defaults(false) }}"
          when: 
            - py_fixes.matched > 0
            - copy_scripts_result is changed # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã
            - "'add_migrations'"
          
        - name: Validate scripts execution
          fail:
            msg: "Script {{ item | basename }} failed. Output: {{ item.stderr }} Error: {{ item.stderr }}"
          loop: "{{ script_results.results }}"
          when:
            - item.failed
            - not ignore_py_errors | default(false)
          loop_control:
            label: "{{ item.item | basename }}"
      when: process_python_fixes | default(true)

    
    - name: Save deployment log   # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞—á–∫–µ
      lineinfile:
        path: "/var/log/deployment.log"
        line: |
          [{{ ansible_date_time.iso8601 }}] {{ inventory_hostname }}
          {% if install_result is failed or extract_result is failed%}
          FAILED: {{ install_result.msg | default(extract_result.msg)}}
          {% else %}
          SUCCESS
          {% endif %}
      delegate_to: localhost
      run_once: yes
      when: telegram_summary_notify | default(true)
    
    - name: Delete all copy files after installation # —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –º–∞—à–∏–Ω–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ *.zip, *.sh, *.py
      block:
        - name: Find and delete copied files
          find:
            paths: /home/sysadm/
            patterns: "*.zip, *.sh, *.py"
            age: "0d" # –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            recurse: no
          register: files to delete # –í–æ–∑–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä
          delegate_to: {{ inventory_hostname }}
          run_once: false

        - name: Remove found files    # –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          file:
            path: "{{item.path}}"
            state: absent
          loop: "{{ files_to_delete.files}}"
          ignore_errors: yes
          delegate_to: "{{ inventory_hostname }}"
          run_once: false
          when:
            - install_result is succeeded
            - install_result is succeeded

    # –ß–ê–°–¢–¨ –° –¢–ì-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏. –ú–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤) 
    - name: Send summary to Telegram
      uri:
        url: "https://api.telegram.org/bot{{ telegram_bot_token }}/sendMessage"
        method: POST
        body_format: json
        body:
          chat_id: "{{ telegram_chat_id }}"
          text: |
            üìä *–ò—Ç–æ–≥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è {{ project_name }}*
            {% set success = [] %}
            {% set failed = [] %}
            {% for hosts in ansible_play_hosts %}
              {% if hostvars[host].install_result is difined and hostvars[host].install_result is success %}
                {% if success.append(host) %}{% endif %}
              {% else %}
                {% if failed.append(host) %}{% endif %}
              {% endif %}
            {% endfor %}
            ‚úÖ –£—Å–ø–µ—à–Ω–æ: {{ success | count }} 
            ‚ùå –û—à–∏–±–∫–∞: {{ failed | count }}
            {% if failed | count > 0 %}
            –ù–µ—É–¥–∞—á–Ω—ã–µ —Ö–æ—Å—Ç—ã: {{ failed | join(', ') }}
            {% endif %}
          parse_mode: markdown           
      delegate_to: localhost
      run_once: yes
      when: telegram_summary_notify | default(false)

  handlers:
    - name: Send immediate Telegram notification
      uri:
        url: "https://api.telegram.org/bot{{ telegram_bot_token }}/sendMessage"
        method: POST
        body_format: json
        body:
          chat_id: "{{ telegram_chat_id }}"
          text: |
            {% if install_result is failed or extract_result is failed %}
            ‚ùå [[{{ inventory_hostname }}] FAILED
            {% if extract_result is failed %}Extract: {{ extract_result.msg }}{% endif %}
            {% if install_result is failed %}Install: {{ install_result.msg }}{% endif %}
            {% else %}
            ‚úÖ { {{ inventory_hostname }}} SUCCESS
            { % endif % }
            Timestamp: {{ ansible_date_time.time }}
          parse_mode: markdown
        delegate_to: localhost
        ignore_errors: yes
        when:
          - telegram_immediate_notify | default(true) # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¢–ì –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ vars/main.yml - false
          - install_result is defined or extract_results is defined  

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–æ–¥
      ansible all -i inventory.yml -m ping

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ web-—Å–µ—Ä–≤–µ—Ä–æ–≤
      ansible webservers -i inventory.yml -m ping